/*********************** Question 1 source file ********************/

/*
 * File: stacksentinel.cpp
 * 
 * This program implements a simple stack of integers
 * using a linked list with a sentinel
 * 
 * Programmer: Manuel Burnay
 * 
 * Date Created: 21/10/2017
 * 
 * Last Edit: 24/10/2017
 */

#include <iostream>
#include <fstream>
using namespace std;

class node 
{
	friend class stack;	// stack needs access to node's members

	private:
		int data; 		// this is the data in a stack node
		node *next; 	// pointer to the next stack node

	public:
		node(int x);	// data = x, next = NULL
	};

	class stack 
	{
	private:
		node sentinel; // sentinel for the stack

	public:
		stack(void); 					// constructor
		void push(int x);				// Push method: Places a new node in the stack
		int pop(void);					// Pop method: Retrieves the data of the last placed node in the stack
		bool empty(void) const; 		// check for empty stack
		void write(ostream &out) const;	// write the stack to out
		void stackvalue(void) const;	// The data in the sentinel node relates to how many nodes are in the stack, and this methods prints that data to screen
};

int main()
{
	stack mystack;
	
	ofstream fout ("stacksentinelout.txt");

	char ch;		// Menu variable, the keyboard input gets placed into this variable to be compared to the menu options
	int x;			// Variable that either takes in a value inputted from the keyboard to be placed in the stack, or it takes a value from retrieved data in the stack

	cout << "A dynamic stack of integers\n";
	fout << "A dynamic stack of integers\n";

	do 
	{
		// print a little menu
		cout << "\n\np = push \n";
		cout << "o = pop\n";
		cout << "s = print to screen\n";
		cout << "f = print to file\n";
		cout << "q = quit\n";
		cout << "v = how many items in the stack\n\n";

		cin >> ch;

		if (ch == 'p')
		{
			cout <<"\ndata to push: ";
			cin >> x;
			mystack.push(x);
		}

		else if(ch == 'o') 
		{
			if(mystack.empty()) 
			{
				cout << "Stack is empty\n";
			} 

			else 
			{
				cout << "\n\ndata popped : " << mystack.pop();
			}
		}

		else if(ch == 's') { mystack.write(cout); }

		else if(ch == 'f') { mystack.write(fout); }

		else if(ch == 'v') { mystack.stackvalue(); }
	}
	while(ch != 'q');

	fout.close();
	return 0;
}

node::node(int x)	 // Node constructor
{
	data = x;		 // Takes in a int value to be placed in data 
	next = NULL;	 // Creates a pointer, which is set to NULL, but it's to point to the the latest existing node in the stack. The only node that remains pointing to NULL is the very first node created (bottom of the stack)
}

stack::stack() :sentinel(0)		// Stack constructor, simply creates the sentinel node
{}

/* 
	the push function takes an existing stack

	+------+ 	 +------+ 	  +------+ 			+------+
	| 0    | 	 | data | 	  | data |		    | data |
	+------+ 	 +------+ 	  +------+ 			+------+
	| next |---->| next |---->| next |----> ... | next |----> NULL
	+------+ 	 +------+ 	  +------+		    +------+
	sentinel 	  top of 					    bottom of
				  stack 						  stack

	ptr points to a new node object

			 +------+
			 |   x  |
	ptr ---->+------+
			 | next |
			 +------+

	then connect this new node into the list

	+------+ 	 +------+ 	  +------+			+------+
	|  0   | 	 |  x   | 	  | data | 			| data |
	+------+ 	 +------+	  +------+ 			+------+
	| next |---->| next |---->| next |----> ... | next |----> NULL
	+------+ 	 +------+ 	  +------+ 			+------+
	sentinel 	  new top      old top           bottom
*/

void stack::push(int x)			// Simple push method of a linked list type stack. Places a new node in the stack 
{
	node * ptr;					// Cretes a dummy pointer,
	ptr = new node(x);			// That creates a new node 

	ptr->next = sentinel.next;	// Makes the node's pointer point to the latest node in the stack (which is what the sentinel is pointing to)
	sentinel.next = ptr;		// Now sentinel points to the new node 

	sentinel.data++;			// Increments the sentinel data, that represents the amount of nodes in the stack
}

/* 
	The pop function takes an existing stack
	+------+ 	 +------+ 	  +------+ 			+------+
	|   0  | 	 | data | 	  | data | 			| data |
	+------+ 	 +------+ 	  +------+ 			+------+
	| next |---->| next |---->| next |----> ... | next |----> NULL
	+------+ 	 +------+ 	  +------+ 			+------+
	sentinel      top of                        bottom of
				   stack 						  stack

	and picks off the first node object to return itâ€™s data

			 +------+
			 | 1st  |
	ptr ---->+------+
			 | next |
			 +------+

	then reassigns the next pointer to the second node

	+------+ 	 +------+ 		   +------+
	|  0   | 	 | 2nd  | 		   | data |
	+------+ 	 +------+ 		   +------+
	| next |---->| next |----> ... | next |---->NULL
	+------+ 	 +------+ 		   +------+
	sentinel 	  new top		    bottom
*/

int stack::pop(void)						// Simple pop method of a linked list type stack. Retrieves the data of the last placed node in the stack
{
	int temp = 0;							// Dummy variable take will take in the data of the latest node in the stack
	temp = sentinel.next->data;			

	node * ptr = sentinel.next;				// I believe this was to be used to determine where sentinel points to after poping a node, but it ends up unused <- LIE! this pointer deletes the node, as to prevent memory leakage

	sentinel.next = sentinel.next->next;	// Sentinel now points to the node that preceeded the popped node
	delete ptr;

	if(sentinel.data != 0)
	{
		sentinel.data--;					// Lowers the sentinel count to represent the current amount of nodes in the stack. It's within an if statement to ensure the count doesn't misalign by going under 0
	}

	return temp;
}
bool stack::empty(void) const // check for empty stack
{
	return(sentinel.next == NULL);
}

void stack::write(ostream &out) const // write the stack to out
{
	node * ptr = sentinel.next;		// Creates a dummy pointer that goes along the stack, node by node, until the bottom of the stack (which is a node pointing to NULL)

	while(ptr != NULL)
	{
		out << ptr->data << ", ";
		ptr = ptr->next;
	}

	out << endl;
}

void stack::stackvalue(void) const
{
	cout << "\n" << sentinel.data << " data sets in the stack" << endl;		// Prints of the total amount of nodes/data sets in the stack to the screen
}

/*********************** Question 1 output file ********************/

A dynamic stack of integers
4, 3, 2, 1, 
2, 1, 

/*********************** Question 2 source file ********************/

/*
 * File: stacq.cpp
 * 
 * This program implements a cross between a stack and a queue
 * 
 * Programmer: Manuel Burnay
 *
 * Date Created: 21/10/2017
 * 
 * Last Edit: 21/10/2017
 */

#include <iostream>
#include <fstream>
using namespace std;

class node
{
	friend class stacq;

	private:
		int data; 		// this is the data in a stacq element
		node *next; 	// pointer to the next node on the stack

	public:
		node(int x) {data = x; next = NULL;}
};

class stacq
{
	private:
		node sentinel;						// I noticed that a sentinel node would operate just like this count variable + top pointer did, so I used what I learned in the previous exercise and use a sentinel node instead

	public:
		stacq(void); 						// constructor of an empty stacq
		void store(int x); 					// store the value x
		int retrieve(void); 				// retrieve a value
		bool empty(void) const; 			// check for empty stack
		void write(ostream &out) const; 	// write stacq to out
};

/*
	A stacq looks like

	count =
			 +------+ 	  +------+	   +------+ 		 +------+
			 | data | 	  | data | 	   | data | 		 | data |
	top ---> +------+ 	  +------+ 	   +------+			 +------+
			 | next |---->| next |---->| next |----> ... | next |---->NULL
			 +------+ 	  +------+	   +------+ 		 +------+
*/

int main()
{
	stacq mine;
	ofstream fout ("stacqout.txt");
	
	char ch;		// Menu variable, the keyboard input gets placed into this variable to be compared to the menu options
	int x;			// Variable that either takes in a value inputted from the keyboard to be placed in the stack, or it takes a value from retrieved data in the stack

	cout << "A dynamic stacq of integers\n";
	fout << "A dynamic stacq of integers\n";

	do
	{
		// print a little menu
		cout << "\n\ns = store \n";
		cout << "r = retrieve\n";
		cout << "p = print to screen\n";
		cout << "f = print to file\n";
		cout << "q = quit\n\n";

		cin >> ch;

		if (ch == 's')
		{
			cout <<"\ndata to store :";
			cin >> x;
			mine.store(x);
		}

		else if(ch == 'r') 
		{
			if(mine.empty())
				cout << "empty\n";

			else
				cout << "\n\ndata retrieved :" << mine.retrieve();
		}

		else if(ch == 'p') mine.write(cout);

		else if(ch == 'f') mine.write(fout);
	}
	while(ch != 'q');

	fout.close();
	return 0;
}

stacq::stacq(void) :sentinel(0) // constructor of an empty stacq. The data inside the sentinel node will store the stacq count, and the pointer will point to the latest node inserted in the stacq
{}

void stacq::store(int x) // store the value x. Operates like a push menthod in a linked list stack type
{
	node * ptr;					// Cretes a dummy pointer,
	ptr = new node(x);			// That creates a new node 

	ptr->next = sentinel.next;	// Makes the node's pointer point to the latest node in the stacq (which is what the sentinel is pointing to)
	sentinel.next = ptr;		// Now sentinel points to the new node 

	sentinel.data++;			// Increments the sentinel data, that represents the amount of nodes in the stac1
}

int stacq::retrieve(void) // retrieve a value. The way a stacq operates is that it will alternate between getting the newest node stored, or the oldest one. The way it's set up is if the total amount of nodes in the stacq is odd, then it will take the newest data stored, and it'll take the oldest if the total amount of nodes is even
{
	int temp = 0;					// Dummy variable take will take in the data of the latest node in the stack
	node * ptr = sentinel.next;		// Here this pointer does serve a purpose: When the Node amount is even, this pointer goes down the line to the oldest node in it and retrieves its value 


	if((sentinel.data%2) == 0 && sentinel.next != NULL)		// If the Node amount is even
	{
		node * cutter = sentinel.next;		// Aptly named cutter, it cuts off the last node from the stacq (the node whose data is being retrieved)

		while(ptr->next != NULL)	// ptr goes down the stacq until it reaches the oldest node in the stacq
		{
			cutter = ptr;
			ptr = ptr->next;
		}

		cutter->next = NULL;	// Cutter then points to the node preceeds that node, and has it point to NULL, thus cutting that last node off the stacq
		temp = ptr->data;		// temp then equals the data inside the node
	}

	else if((sentinel.data%2) == 1 && sentinel.next != NULL)	// If the Node amount is odd
	{
		temp = sentinel.next->data;		// temp equals the data of the latest node inserted into the stacq
		
		node * ptr = sentinel.next;

		sentinel.next = sentinel.next->next;	// That node is then cut off the stacq, but having sentinel point to the following node
	}

	delete ptr;		// the node that got cut off from the stacq (regardless if it's the top of bottom node) gets deleted

	if(sentinel.data != 0)
	{
		sentinel.data--;	// the node amount then gets decremented
	}

	return temp;	// data from the node gets retrieved back to main
}

bool stacq::empty(void) const // check for empty stack
{
	return(sentinel.next == NULL);
}

void stacq::write(ostream &out) const // write stacq to out
{
	node * ptr = sentinel.next;		 // Creates a dummy pointer that goes along the stack, node by node, until the bottom of the stack (which is a node pointing to NULL)

	while(ptr != NULL)
	{
		out << ptr->data << ", ";
		ptr = ptr->next;
	}

	out << endl;
}

/*********************** Question 2 output file ********************/

A dynamic stacq of integers
4, 3, 2, 1, 
4, 3, 2, 
3, 2, 

/*********************** Question 3 source file ********************/

/*
 * File: deque.cpp
 *
 * This program implements a double ended queue of integers as a
 * integers as adoubly linked list
 *
 * Programmer: Manuel Burnay
 *
 * Date Created: 21/10/2017
 *
 * Last Edit: 24/10/2017
 */

#include <iostream>
#include <fstream>
using namespace std;

class node
{
	friend class deque;

	private:
		int data; // this is the data in a list element
		node *next; // pointer to the next node in the list
		node *prev; // pointer to the previous node in the list

	public:
		node(int x); // data = x, prev=next = NULL
};

class deque
{
private:
	node* front; // pointer to the front of the list
	node* back; // pointer to the back of the list

public:
	deque(void); // constructor of an empty queue
	void put_front(int x); // put x at the front of the list
	void put_back(int x); // put x at the back of the list
	int get_front(void); // get the node at the front of the list
	int get_back(void); // get the node at the back of the list
	bool empty(void) const; // check for empty deque
	void write(ostream &out) const; // write data stored to out
};

/*
	A deque looks like

		     +------+ 	  +------+ 	   +------+ 		 +------+
		     | data | 	  | data | 	   | data | 		 | data |
		     +------+  	  +------+ 	   +------+ 		 +------+
		   	 | next |---->| next |---->| next |----> ... | next |---->NULL
	NULL<----| prev |<----| prev |<----| prev |... <---- | prev |
			 +------+ 	  +------+ 	   +------+ 		 +------+
				^ 											^
				| 											|
				| 											|
			   back 					  				  front
*/
int main()
{
	deque mydeque;
	ofstream fout ("dequeout.txt");
	char ch;
	int x;

	cout << "A dynamic deque of integers\n";
	fout << "A dynamic deque of integers\n";

	do
	{
		// print a little menu
		cout << "\n\n1 = put front \n";
		cout << "2 = put back \n";
		cout << "3 = get front\n";
		cout << "4 = get back\n";
		cout << "s = print to screen\n";
		cout << "f = print to file\n";
		cout << "q = quit\n\n";
		cin >> ch;

		if (ch == '1')
		{
			cout <<"\ndata to put front:";
			cin >> x;
			mydeque.put_front(x);
		}

		else if (ch == '2')
		{
			cout <<"\ndata to put back:";
			cin >> x;
			mydeque.put_back(x);
		}

		else if(ch == '3')
		{
			if(mydeque.empty())
			{
				cout << "deque is empty\n";
			}

			else
			{
				cout << "\n\ndata gotten : " << mydeque.get_front();
			}
		}

		else if(ch == '4')
		{
			if(mydeque.empty())
			{
				cout << "deque is empty\n";
			}

			else
			{
				cout << "\n\ndata gotten : " << mydeque.get_back();
			}
		}

		else if(ch == 's') mydeque.write(cout);

		else if(ch == 'f') mydeque.write(fout);
	}
	while(ch != 'q');

	fout.close();

	return 0;
}

node::node(int x)
{
	data = x;
	next = NULL;
	prev = NULL;
}

deque::deque(void) // constructor of an empty queue
{
	front = NULL;
	back = front;
}

/*
	the put_back function takes an existing deque

			  +------+ 	   +------+ 		 +------+
			  | last | 	   | data | 		 | 1st  |
			  +------+ 	   +------+ 		 +------+
			  | next |---->| next |----> ... | next |---->NULL
	NULL<---- | prev |<----| prev |<---- ... | prev |
			  +------+ 	   +------+ 		 +------+
				^ 								^
				| 								|
				| 								|
			   back 						  front

	ptr points to a new node

			 +------+
			 |  x   |
	ptr ---->+------+
			 | next |
			 | prev |
			 +------+

	then connect this new node into the list

			 +------+ 	  +------+ 	   +------+ 		 +------+
			 |  x   | 	  | last | 	   | data |			 | 1st  |
			 +------+ 	  +------+	   +------+ 		 +------+
			 | next |---->| next |---->| next |----> ... | next |---->NULL
	NULL<----| prev |<----| prev |<----| prev |<---- ... | prev |
			 +------+ 	  +------+ 	   +------+		 	 +------+
				^ 											^
				| 											|
				| 											|
			   back 									  front
*/

void deque::put_back(int x) // put x at the back of the list
{
	node * ptr;
	ptr = new node(x);

	ptr->next = back;
	ptr->prev = NULL;

    if(back == NULL)
    {
        front = ptr;
    }

    else
    {
        back->prev = ptr;
    }

	back = ptr;
}

/*
	the put_front function takes an existing deque

			  +------+ 	   +------+ 		 +------+
			  | last | 	   | data | 		 | 1st  |
			  +------+ 	   +------+ 		 +------+
			  | next |---->| next |----> ... | next |---->NULL
	NULL<---- | prev |<----| prev |<---- ... | prev |
			  +------+ 	   +------+ 		 +------+
				^ 								^
				| 								|
				| 								|
			   back 						  front

	ptr points to a new node

			 +------+
			 |  x   |
	ptr ---->+------+
			 | next |
			 | prev |
			 +------+

	then connect this new node into the list

			 +------+ 	  +------+ 	  	    +------+ 	 +------+
			 | last | 	  | data | 	   	    | 1st  |	 |  x   |
			 +------+ 	  +------+	   	    +------+ 	 +------+
			 | next |---->| next |----> ... | next |---->| next |---->NULL
	NULL<----| prev |<----| prev | ... <----| prev |<----| prev |
			 +------+ 	  +------+ 	   	    +------+	 +------+
				^ 											^
				| 											|
				| 											|
			   back 								  	  front

*/

void deque::put_front(int x) // put x at the front of the list
{
	node * ptr;
	ptr = new node(x);

	ptr->next = NULL;
	ptr->prev = front;

    if(front == NULL)
    {
        back = ptr;
    }

    else
    {
        front->next = ptr;
    }

	front = ptr;
}

/*
	The get_front function takes an existing deque

			 +------+ 	  +------+ 	  	    +------+ 	 +------+
			 | last | 	  | data | 	   	    | 2nd  |	 | 1st  |
			 +------+ 	  +------+	   	    +------+ 	 +------+
			 | next |---->| next |----> ... | next |---->| next |---->NULL
	NULL<----| prev |<----| prev | ... <----| prev |<----| prev |
			 +------+ 	  +------+ 	   	    +------+	 +------+
				^ 											^
				| 											|
				| 											|
			   back 								  	  front

	and picks off the first data node to be returned

			 +------+
			 | 1st  |
	ptr ---->+------+
			 | next |
			 | prev |
			 +------+

	then reassigns the front pointer

			  +------+ 	   +------+ 		 +------+
			  | last | 	   | data | 		 | 2nd  |
			  +------+ 	   +------+ 		 +------+
			  | next |---->| next |----> ... | next |---->NULL
	NULL<---- | prev |<----| prev |<---- ... | prev |
			  +------+ 	   +------+ 		 +------+
				^ 								^
				| 								|
				| 								|
			   back 						  front
*/

int deque::get_front(void) // get the node at the front of the list
{
	node * ptr;
	int temp = front->data;
		
	if(front == back)
	{
		delete front;
		front = back = NULL;
	}
	
	else
	{
		ptr = front->prev;
		ptr->next = NULL;
		
		delete front;
		front = ptr;
	}
	
	
	return temp;
}

/*
	The get_back function takes an existing deque

			 +------+ 	  +------+ 	   +------+ 		 +------+
			 | last | 	  | 2nd  | 	   | data |			 | 1st  |
			 +------+ 	  +------+	   +------+ 		 +------+
			 | next |---->| next |---->| next |----> ... | next |---->NULL
	NULL<----| prev |<----| prev |<----| prev |<---- ... | prev |
			 +------+ 	  +------+ 	   +------+		 	 +------+
				^ 											^
				| 											|
				| 											|
			   back 									  front

	and picks off the last data node to be returned

			 +------+
			 | last |
	ptr ---->+------+
			 | next |
			 | prev |
			 +------+

	then reassigns the back pointer

			  +------+ 	   +------+ 		 +------+
			  | 2nd  | 	   | data | 		 | 1st  |
			  +------+ 	   +------+ 		 +------+
			  | next |---->| next |----> ... | next |---->NULL
	NULL<---- | prev |<----| prev |<---- ... | prev |
			  +------+ 	   +------+ 		 +------+
				^ 								^
				| 								|
				| 								|
			   back 						  front
*/

int deque::get_back(void) // get the node at the back of the list
{
	int temp = back->data;
	node * ptr;

	if(back == front)
	{
		delete back;
		back = front = NULL;
	}
	
	else
	{
		ptr = back->next;
		ptr->prev = NULL;
		
		delete back;
		back = ptr;
	}

	return temp;
}

bool deque::empty(void) const // check for empty deque
{
	return (back == NULL && front == NULL);
}

void deque::write(ostream &out) const // write data stored to out
{
	node * ptr = back;

	while(ptr != NULL)
	{
		out << ptr->data << ", ";
		ptr = ptr->next;
	}

	out << endl;
}

/*********************** Question 3 output file ********************/

A dynamic deque of integers
1, 2, 3, 
6, 5, 4, 1, 2, 3, 
6, 5, 4, 1, 2, 
5, 4, 1, 2, 
